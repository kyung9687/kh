java 
-oop(객체 지향 프로그래밍 언어),os 독립적, 자동 메모리 관리

jre
-자바 실행 환경

jdk
-자바 개발용 코드 모음

기본 자료형 : 실제 값을 저장하는 용도의 자료형
참조 자료형 : 객체를 참조하기 위한 주소를 저장하는 자료형

byte -1byte
int -4byte
char -2byte
boolean -1byte
short - 4byte
long - 8byte
float -4byte
double-8byte

자동 형변환 
값의 범위가 큰 자료형과 값의 범위가 작은 자료형의 연산 시
컴파일러가 자동으로 값의 범위가 작은 자료형을 값의 범위가 큰 자료형으로 변환

강제 형변환
1)값의 범위가 큰 자료형을 값의 범위가 작은 자료형으로 변환
강제 형변환 시 데이터 손실이 발생할 수 있음
2) 출력 데이터의 표기법 변경을 원할때
3) 다운 캐스팅

클래스란
객체를 만들기 위해 속성과 기능을 정의한 문서

-필드 == 맴버변수
1)인스턴스 변수 : 인스턴스 생성시 할당 되는 변수
2)클래스 변수: static 붙음
-> 프로그램 실행 시 클래스명 필드명으로 static영역에 할당

추상화 :불필요한 요소를 제거, 공통적인 것을 남겨 단순화 함으로 유연성을 확보

캡슐화 : 메서드+ 캡슐 묶음 -> 클래스
2)필드를 private이용해서 직접 접근 제한(정보 은닉)
3)필드 간접 접근 방법 제공( 데이터 검증)

-new 연산자
 클래스를 통해 새로운 객체를 만들고
생성된 객체의 주소를 반환
정의 : 객체 생성시 필드 초기화, 기능을 수행하는 특별한 메서드
작성법: 접근제어자 클래스명(){} //반환형 x

-오버로딩
정의: 같은 클래스에 같은 이름의 메서드를 여러개 작성하는 기술

성립조건:
-메서드명 동일
-매개 변수의 순서,개수,타입중 1개라도 달라야한다
접근제어자, 반환 타입은 오버로딩과 관계없다

추상 메서드:몸체가 없는 매서드
public abstract 반환형 메서드명();

추상 클래스 : 추상 메서드 를 가진 클래스
public abstract class 클래스명{}

-추상클래스를 이용해서 객체 생성 불가
-> 자식 클래슬르 이용해서 구현
->익명 클래스를 이용해서 즉석에서 미와ㄴ성 부분 구형

-인터페이스
-관련없는 객체끼리의 접점 만들기
-오직 추상메서드만 가질수있다
-> 상속받은 자식이 부모 메서드를 모두 다 구현
--> 상속 받은 자식들이 모두 비슷한 모습을 가지게됨
 --> 공통적인 규약을 설정할 수 있다


			추상클래스 ,		인터페이스의 차이점

상속키워드: 		extends			implements

다중상속가능 여부 	:	x			o

일반 메서드 포함 가능 여부 : o			x

추상메서드에 abstract       : o			x
키워드 명시 여부


컬렉션 프레임 워크: 자바에서 자료구조 모아서 제공
-List : 순서가 존재하고 중복데이터 허용
-set : 순서가 없고 중복데이터 비허용 
-Map: K:V 쌍으로 데이터를 저장
	key는  중복x
	value는 key로 구분되기떄문에 중복

-제네릭스
-타입 제한(컴파일 시점에 타입을 검사)
타입을 확인하는 instanceof,다운캐스팅 불필요

wrapper class
-기본 자료형을 List에 저장하고 싶은데
List 같은 컬렉션은 : 객체만 저장가능
기본 자료형 -> 객체 형태 만들어주는 클래스

예외처리 구문
1)try -catch : try에서 예외코드 수행 catch 잡아서 처리
2)thorws: 발생된 예외를 메서드 호출부로 던짐

예외처리 구문이 수행되면
프로그램이 비정상 종료되지 않음

unchecked exception
선택적 예외처리
안쓰면 자동으로 throws

checked exception : 예외 처리 구문을 필수적으로 작성
안쓰면 컴파일 에러

-바이트 기반 스트림 : 1byte 데이터 입출력

-문자 기반 스트림 : 2byte 문자 입출력

-보조 스트림 : 단독 사용 불가 스트림
buffered: 데이터를 모아서 입출력-> 속도 증가
object : 객체 형태로 입출력+ 직렬화

내부클래스
-외부 클래스 내부에 선언된 클래스
-외부 클래스와 밀접한 관계를 맺어
 외부 클래스의 필드에 직접 접근이 가능한 클래스
익명 클래스
-이름이 없는 클래스
-추상 클래스, 인터페이스를 상속받는 클래스를 만들지 않고
필요시 즉석에서 구현하는 클래스

->람다식 사용에 필요함

-람다식 () -> {}
함수형 프로그래밍을 지원하기 위한 기능
익명함수 내부의 하나 뿐인 추상 클래스를 구현하기 위한 식
-함수형 인터페이스
 -추상 메서드 를 한개만 갖는 인터페이스
-@functionalInterface 어노테이션으로 검사

stream api
컬렉션/ 배열의 요소를 순서대로 접근해서 처리할 수 있는 객체
-람다식을 이용한 함수형 프로그래밍 방식 사용 가능
- 한번 사용한 스트림은 재사용 불가
-원본 데이터를 변경하지 않는다

-중간연산 : 연산의 결과로 새로운 스트림 객체 생성
-최종 연산: 연산의 결과가 없거나 값 하나만 반환